/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Movimento;

import Funcoes.Dates;
import Funcoes.DbMain;
import Funcoes.FuncoesGlobais;
import Funcoes.VariaveisGlobais;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author Samic
 */
public class jAjustes extends javax.swing.JInternalFrame {
    DbMain conn = VariaveisGlobais.conexao;
    
    /**
     * Creates new form jAjustes
     */
    public jAjustes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JBtnOk = new javax.swing.JButton();
        JBarra = new javax.swing.JProgressBar();
        JStatus = new javax.swing.JLabel();

        setClosable(true);
        setTitle(".:: Ajustes");
        setVisible(true);

        JBtnOk.setText("Ok");
        JBtnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnOkActionPerformed(evt);
            }
        });

        JStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBarra, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtnOk)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JBtnOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBtnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnOkActionPerformed
        new AjustesThread().start();
    }//GEN-LAST:event_JBtnOkActionPerformed

    class AjustesThread extends Thread {
        public AjustesThread() {}
        public void run() { 
            Ajustar();
        }
    }

    private void Ajustar() {
        JBtnOk.setEnabled(false);
        
        //
        // Do Auxiliar que Não existe no recibo (Alimenta Matriz)
        JStatus.setText("Ajustes (01/02) - Carga da Matriz, Aux que não estão em Rec.");
        JBarra.setValue(0);
        String aSQL = "select a.* from auxiliar a where not exists (select r.* from recibo r where a.rc_aut = r.autenticacao and a.dtvencimento = r.dtvencimento) and a.conta = 'REC';";
        String[][] aAuxRec = {};
        ResultSet rs = conn.AbrirTabela(aSQL, ResultSet.CONCUR_READ_ONLY);
        try {
            int eof = DbMain.RecordCount(rs); int pos = 1;
            while (rs.next()) {
                String aAut = null; try { aAut = rs.getString("rc_aut"); } catch (SQLException ex) {}
                String aRgp = null; try { aRgp = rs.getString("rgprp"); } catch (SQLException ex) {}
                String aRgi = null; try { aRgi = rs.getString("rgimv"); } catch (SQLException ex) {}
                String aCon = null; try { aCon = rs.getString("contrato"); } catch (SQLException ex) {}
                String aCpo = null; try { aCpo = rs.getString("campo"); } catch (SQLException ex) {}
                String aDtv = null; try { aDtv = rs.getString("dtvencimento"); } catch (SQLException ex) {}
                aAuxRec = FuncoesGlobais.ArraysAdd(aAuxRec, new String[] {aRgp, aRgi, aCon, aCpo, aDtv, aAut});
                
                int br = ((pos++ * 100) / eof) + 1;
                JBarra.setValue(br);
            }
        } catch (SQLException e ) {}
        DbMain.FecharTabela(rs);

        //
        // Processa Auxiliar que Não existe no recibo - Verifica a existencia primeiro
        JStatus.setText("Ajustes (02/02) - Processa Matriz, Aux que não estão em Rec.");
        JBarra.setValue(0);
        int eof = aAuxRec.length; int pos = 1;
        for (String[] value : aAuxRec) {
            // Verifica se existe no recibo
            //if (!VerificaRecibo(value[5])) {
                String insertSQL = "INSERT INTO jgeral.recibo (RGPRP, RGIMV, CONTRATO, CAMPO, DTVENCIMENTO, TAG, AUTENTICACAO) " +
                        "VALUES (?, ?, ?, ?, ?, 'X', ?)";
                Object[][] param = new Object[][] {
                    {"string", value[0]},
                    {"string", value[1]},
                    {"string", value[2]},
                    {"string", value[3]},
                    {"date", Dates.toSqlDate(Dates.StringtoDate(value[4], "yyyy/MM/dd"))},
                    {"double", Double.valueOf(value[5])},
                };
                conn.ExecutarComando(insertSQL, param);
            //}
        
            int br = ((pos++ * 100) / eof) + 1;
            JBarra.setValue(br);
        }

        JStatus.setText("PRONTO");
        JBtnOk.setEnabled(true);
    }
    
    private void Ajustar2() {
        JBtnOk.setEnabled(false);
        
        //
        // Do Auxiliar que Não existe no recibo (Alimenta Matriz)
        JStatus.setText("Ajustes (01/04) - Carga da Matriz, Aux que não estão em Rec.");
        JBarra.setValue(0);
        String aSQL = "select r.RGPRP, r.RGIMV, r.CONTRATO, r.CAMPO, r.DTVENCIMENTO, r.RC_AUT from auxiliar r where not exists (select a.* from recibo a where r.rc_aut = a.AUTENTICACAO) and conta = 'REC';";
        String[][] aAuxRec = {};
        ResultSet rs = conn.AbrirTabela(aSQL, ResultSet.CONCUR_READ_ONLY);
        try {
            int eof = DbMain.RecordCount(rs); int pos = 1;
            while (rs.next()) {
                String aAut = null; try { aAut = rs.getString("rc_aut"); } catch (SQLException ex) {}
                String aRgp = null; try { aRgp = rs.getString("rgprp"); } catch (SQLException ex) {}
                String aRgi = null; try { aRgi = rs.getString("rgimv"); } catch (SQLException ex) {}
                String aCon = null; try { aCon = rs.getString("contrato"); } catch (SQLException ex) {}
                String aCpo = null; try { aCpo = rs.getString("campo"); } catch (SQLException ex) {}
                String aDtv = null; try { aDtv = rs.getString("dtvencimento"); } catch (SQLException ex) {}
                aAuxRec = FuncoesGlobais.ArraysAdd(aAuxRec, new String[] {aRgp, aRgi, aCon, aCpo, aDtv, aAut});
                
                int br = ((pos++ * 100) / eof) + 1;
                JBarra.setValue(br);
            }
        } catch (SQLException e ) {}
        DbMain.FecharTabela(rs);
        
        //
        // Do Recibo que Não existe no Auxiliar (Alimenta Matriz)
        JStatus.setText("Ajustes (02/04) - Carga da Matriz, Rec que não estão em Aux.");
        JBarra.setValue(0);
        aSQL = "select r.RGPRP, r.RGIMV, r.CONTRATO, r.CAMPO, r.DTVENCIMENTO, r.AUTENTICACAO from recibo r where not exists (select a.* from auxiliar a where r.autenticacao = a.rc_aut);";
        String[][] aRecAux = {};
        rs = conn.AbrirTabela(aSQL, ResultSet.CONCUR_READ_ONLY);
        try {
            int eof = DbMain.RecordCount(rs); int pos = 1;
            while (rs.next()) {
                String aAut = null; try { aAut = rs.getString("autenticacao"); } catch (SQLException ex) {}
                String aRgp = null; try { aRgp = rs.getString("rgprp"); } catch (SQLException ex) {}
                String aRgi = null; try { aRgi = rs.getString("rgimv"); } catch (SQLException ex) {}
                String aCon = null; try { aCon = rs.getString("contrato"); } catch (SQLException ex) {}
                String aCpo = null; try { aCpo = rs.getString("campo"); } catch (SQLException ex) {}
                String aDtv = null; try { aDtv = rs.getString("dtvencimento"); } catch (SQLException ex) {}
                
                aRecAux = FuncoesGlobais.ArraysAdd(aRecAux, new String[] {aRgp, aRgi, aCon, aCpo, aDtv, aAut});
                
                int br = ((pos++ * 100) / eof) + 1;
                JBarra.setValue(br);
            }
        } catch (SQLException e ) {}
        DbMain.FecharTabela(rs);
        
        //
        // Processa Auxiliar que Não existe no recibo - Verifica a existencia primeiro
        JStatus.setText("Ajustes (03/04) - Processa Matriz, Aux que não estão em Rec.");
        JBarra.setValue(0);
        int eof = aAuxRec.length; int pos = 1;
        for (String[] value : aAuxRec) {
            // Verifica se existe no recibo
            if (!VerificaRecibo(value[5])) {
                String insertSQL = "INSERT INTO jgeral.recibo (RGPRP, RGIMV, CONTRATO, CAMPO, DTVENCIMENTO, TAG, AUTENTICACAO) " +
                        "VALUES (?, ?, ?, ?, ?, 'X', ?)";
                Object[][] param = new Object[][] {
                    {"string", value[0]},
                    {"string", value[1]},
                    {"string", value[2]},
                    {"string", value[3]},
                    {"date", Dates.toSqlDate(Dates.StringtoDate(value[4], "yyyy/MM/dd"))},
                    {"double", Double.valueOf(value[5])},
                };
                conn.ExecutarComando(insertSQL, param);
            }
        
            int br = ((pos++ * 100) / eof) + 1;
            JBarra.setValue(br);
        }
        
        //
        // Processa Recibo que Não existe no Auxiliar - Verifica a existencia primeiro
        JStatus.setText("Ajustes (04/04) - Processa Matriz, Rec que não estão em Aux.");
        JBarra.setValue(0);
        eof = aRecAux.length; pos = 1;
        for (String[] value : aRecAux) {
            // Verifica se existe no recibo
            if (!VerificaAuxiliar(value[5])) {
                String sDtRecebto = PegaExtrato(value[5]);                
                String insertSQL = "";
                Object[][] param = null;
                if (sDtRecebto.equalsIgnoreCase("")) {
                    insertSQL = "INSERT INTO auxiliar (RGPRP, RGIMV, CONTRATO, CAMPO, DTVENCIMENTO, RC_AUT) " +
                        "VALUES (?, ?, ?, ?, ?, ?)";
                    param = new Object[][] {
                        {"string", value[0]},
                        {"string", value[1]},
                        {"string", value[2]},
                        {"string", value[3]},
                        {"date", Dates.toSqlDate(Dates.StringtoDate(value[4], "yyyy/MM/dd"))},
                        {"double", Double.valueOf(value[5])},
                    };
                } else {
                    insertSQL = "INSERT INTO auxiliar (RGPRP, RGIMV, CONTRATO, CAMPO, DTVENCIMENTO, DTRECEBIMENTO, RC_AUT) " +
                        "VALUES (?, ?, ?, ?, ?, ?, ?)";
                    param = new Object[][] {
                        {"string", value[0]},
                        {"string", value[1]},
                        {"string", value[2]},
                        {"string", value[3]},
                        {"date", Dates.toSqlDate(Dates.StringtoDate(value[4], "yyyy/MM/dd"))},
                        {"date", Dates.toSqlDate(Dates.StringtoDate(sDtRecebto, "dd/MM/yyyy"))},
                        {"double", Double.valueOf(value[5])},
                    };
                }
                conn.ExecutarComando(insertSQL, param);
            }
        
            int br = ((pos++ * 100) / eof) + 1;
            JBarra.setValue(br);
        }
        
        JStatus.setText("PRONTO");
        JBtnOk.setEnabled(true);
    }
    
    private boolean VerificaRecibo(String autValue) {
        String vSQL = "SELECT * FROM recibo WHERE autenticacao = " + autValue + ";";
        ResultSet rs = conn.AbrirTabela(vSQL, ResultSet.CONCUR_READ_ONLY);
        int eof = DbMain.RecordCount(rs);
        return eof > 0;
    }
    
    private boolean VerificaAuxiliar(String autValue) {
        String vSQL = "SELECT * FROM auxiliar WHERE conta = 'REC' and rc_aut = " + autValue + ";";
        ResultSet rs = conn.AbrirTabela(vSQL, ResultSet.CONCUR_READ_ONLY);
        int eof = DbMain.RecordCount(rs);
        return eof > 0;
    }
    
    private String PegaExtrato(String autValue) {
        String retorno = "";
        String vSQL = "SELECT DTRECEBIMENTO FROM extrato WHERE rc_aut = " + autValue + ";";
        ResultSet rs = conn.AbrirTabela(vSQL, ResultSet.CONCUR_READ_ONLY);
        try {
            while(rs.next()) {
                retorno = Dates.DateFormata("dd/MM/yyyy", rs.getDate("dtrecebimento"));
            }
        } catch (SQLException e) {}
        DbMain.FecharTabela(rs);
        return retorno;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar JBarra;
    private javax.swing.JButton JBtnOk;
    private javax.swing.JLabel JStatus;
    // End of variables declaration//GEN-END:variables
}
