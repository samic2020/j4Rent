package Movimento;

import Bancos.*;
import Funcoes.*;
import Funcoes.MultColumnSort.MultisortTableHeaderCellRenderer;
import Funcoes.gmail.GmailAPI;
import static Funcoes.gmail.GmailOperations.createEmailWithAttachment;
import static Funcoes.gmail.GmailOperations.createMessageWithEmail;
import Protocolo.Calculos;
import Protocolo.DepuraCampos;
import boleta.Boleta;
import bsh.ParseException;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.Message;
import j4rent.Partida.Collections;
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.*;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.view.JRViewer;

/**
 *
 * @author supervisor
 */
public class jImpBoletas extends javax.swing.JInternalFrame {
    DbMain conn = VariaveisGlobais.conexao;

    /** Creates new form jImpBoletas */
    public jImpBoletas() throws SQLException {
        initComponents();

        jProgress.setVisible(false);

        // Seta Cabecario
        TableControl.header(jLista, new String[][] {{"rgprp","rgimv","contrato","nome","vencimento"},{"0","120","500","70"}});
        TableControl.header(jEmailStatus, new String[][] {{"email","status"},{"500","100"}});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gCondicao = new javax.swing.ButtonGroup();
        jTipoEmail = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jemdia = new javax.swing.JRadioButton();
        jatrasados = new javax.swing.JRadioButton();
        jtodos = new javax.swing.JRadioButton();
        jperiodo = new javax.swing.JRadioButton();
        jPeriodo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jInicial = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel2 = new javax.swing.JLabel();
        jFinal = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jContrato = new javax.swing.JFormattedTextField();
        jListar = new javax.swing.JButton();
        jGerar = new javax.swing.JButton();
        jcbSelectAll = new javax.swing.JCheckBox();
        jProgress = new javax.swing.JProgressBar();
        jchbPreview = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLista = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEmailStatus = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle(".:: Impressão de Boletos Bancários ::.");
        setVisible(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Condição"));
        jPanel2.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N

        gCondicao.add(jemdia);
        jemdia.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jemdia.setSelected(true);
        jemdia.setText("Em Dia");
        jemdia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jemdiaActionPerformed(evt);
            }
        });

        gCondicao.add(jatrasados);
        jatrasados.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jatrasados.setText("Atrasados");
        jatrasados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jatrasadosActionPerformed(evt);
            }
        });

        gCondicao.add(jtodos);
        jtodos.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jtodos.setText("Todos");
        jtodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtodosActionPerformed(evt);
            }
        });

        gCondicao.add(jperiodo);
        jperiodo.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jperiodo.setText("Por período");
        jperiodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jperiodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jatrasados)
                    .addComponent(jperiodo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jemdia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addComponent(jtodos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jemdia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jatrasados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jperiodo))
        );

        jPeriodo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Período"));
        jPeriodo.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jLabel1.setText("Inicio:");

        jInicial.setDate(new java.util.Date(-2208977612000L));
        jInicial.setEnabled(false);
        jInicial.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jLabel2.setText("Final:");

        jFinal.setDate(new java.util.Date(-2208977612000L));
        jFinal.setEnabled(false);
        jFinal.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N

        javax.swing.GroupLayout jPeriodoLayout = new javax.swing.GroupLayout(jPeriodo);
        jPeriodo.setLayout(jPeriodoLayout);
        jPeriodoLayout.setHorizontalGroup(
            jPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPeriodoLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFinal, 0, 0, Short.MAX_VALUE))
            .addGroup(jPeriodoLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPeriodoLayout.setVerticalGroup(
            jPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPeriodoLayout.createSequentialGroup()
                .addGroup(jPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Unitário"));
        jPanel4.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jLabel3.setText("Contrato:");

        jContrato.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jContrato))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jContrato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jListar.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jListar.setText("Listar Locatários");
        jListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jListarActionPerformed(evt);
            }
        });

        jGerar.setFont(new java.awt.Font("Dialog", 1, 9)); // NOI18N
        jGerar.setText("Gerar Boletos");
        jGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGerarActionPerformed(evt);
            }
        });

        jcbSelectAll.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jcbSelectAll.setText("Selecionar todos");
        jcbSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSelectAllActionPerformed(evt);
            }
        });

        jProgress.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jProgress.setStringPainted(true);

        jchbPreview.setSelected(true);
        jchbPreview.setText("Preview");
        jchbPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchbPreviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbSelectAll)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPeriodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jchbPreview, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgress, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(jGerar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jListar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jchbPreview)
                .addGap(57, 57, 57)
                .addComponent(jListar)
                .addGap(13, 13, 13)
                .addComponent(jGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jcbSelectAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.setFont(new java.awt.Font("Dialog", 3, 9)); // NOI18N

        jLista.setAutoCreateRowSorter(true);
        jLista.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jLista.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jLista);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Lista", jPanel5);

        jEmailStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jEmailStatus);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Envio de E-Mail", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jListarActionPerformed
        jListar.setEnabled(false);
        
        if (jemdia.isSelected()) {
            EmDia();
        } else if (jatrasados.isSelected()) {
            Atrasados();
        } else if (jtodos.isSelected()) {
            Todos();
        } else {
            PorPeriodo();
        }

        jListar.setEnabled(true);
    }//GEN-LAST:event_jListarActionPerformed

    private void jGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGerarActionPerformed
        jGerar.setEnabled(false);
        int selRows = jLista.getSelectedRowCount();
        if (selRows <= 0) {
            jGerar.setEnabled(true);
            return;
        }
        int[] selRow = jLista.getSelectedRows();

        String rgprp;
        String rgimv;
        String contrato = null;
        String vencto = null;
        String nnumero = null;
        
        // Limpa lista de email
        TableControl.Clear(jEmailStatus);
        for (int i=0;i<=selRow.length - 1;i++) {
            int nRow = selRow[i];
            int modelRow = jLista.convertRowIndexToModel(nRow);

            rgprp = jLista.getModel().getValueAt(modelRow, 0).toString();
            rgimv = jLista.getModel().getValueAt(modelRow, 1).toString();
            contrato = jLista.getModel().getValueAt(modelRow, 2).toString();
            String[][] EmailLocaDados = null;
            try {
                EmailLocaDados = conn.LerCamposTabela(new String[] {"nomerazao","email"}, "locatarios", "contrato = '" + contrato + "'");
            } catch (SQLException e) {}
            
            String EmailLoca = null;
            if (EmailLocaDados != null) EmailLoca = EmailLocaDados[1][3].toLowerCase();
            
            vencto = jLista.getModel().getValueAt(modelRow, 4).toString();
            
            try { nnumero = jLista.getModel().getValueAt(modelRow, 5).toString().substring(3); } catch (Exception ex) {nnumero = ""; }
            
            boolean reimpbol =  (nnumero.isEmpty() ? false : true); 
            if (reimpbol) System.out.println("Reimpresão nnumero: " + nnumero); else System.out.println("Nova Boleta");
            
            Boleta Bean1 = null;
            try {
                Bean1 = CreateBoleta(rgprp, rgimv, contrato, vencto, reimpbol, nnumero);
                String wnnumero = Bean1.getbolDadosNnumero(); 
                wnnumero = wnnumero.substring(0, wnnumero.length() - 2) + wnnumero.substring(wnnumero.length() - 1, wnnumero.length());
                jLista.getModel().setValueAt(wnnumero, modelRow, 5);
                
//                if (!reimpbol) {
//                    String uSql = "UPDATE recibos SET remessa";
//                    String cSql = "INSERT INTO bloquetos (`rgprp`,`rgimv`,`contrato`," +
//                    "`nome`,`vencimento`,`valor`,`nnumero`,`remessa`) " +
//                    "VALUES (\"&1.\",\"&2.\",\"&3.\",\"&4.\",\"&5.\",\"&6.\",\"&7.\",\"&8.\")";
//                    cSql = FuncoesGlobais.Subst(cSql, new String[] {
//                        rgprp,
//                        rgimv,
//                        contrato,
//                        Bean1.getsacDadosNome(),
//                        Dates.StringtoString(vencto,"dd/MM/yyyy","yyyy-MM-dd"),
//                        Bean1.getbolDadosVrdoc(),
//                        Bean1.getbolDadosNnumero(),
//                        "N"
//                    });
//                    try { if (conn.ExisteTabelaBloquetos()) conn.ExecutarComando(cSql); } catch (Exception e) { e.printStackTrace(); }
//                }
            } catch (SQLException ex) {}

            List<Boleta> lista = new ArrayList<Boleta>();
            lista.add(Bean1);
            
            JRDataSource jrds = new JRBeanCollectionDataSource(lista);
            try {
                String fileName = "reports/Boletos.jasper";
                JasperPrint print = JasperFillManager.fillReport(fileName, null, jrds);

                JRExporter exporter = new JRPdfExporter();

                new jDirectory("reports/Boletas/" + Dates.iYear(new Date()) + "/" + Dates.Month(new Date()) + "/");
                String pathName = "reports/Boletas/" + Dates.iYear(new Date()) + "/" + Dates.Month(new Date()) + "/";
                
                String outFileName = pathName + contrato + "_" + Bean1.getsacDadosNome() + "_" + vencto + "_" + Bean1.getbolDadosNnumero().substring((bancos.getBanco().equalsIgnoreCase("341") ? 4 : 3)) + ".pdf";
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                exporter.exportReport();

                if (jchbPreview.isSelected()) {
                    viewReportFrame("Boleto Bancário", print);
                } else {
                    String[][] asend = conn.LerCamposTabela(new String[] {"envio"}, "locatarios", "contrato = '" + contrato + "'");
                    if (asend != null) {
                        if (Integer.valueOf(asend[0][3]) == 1) {
                            //Outlook email = new Outlook();
                            try {            
                                String To = EmailLoca.trim().toLowerCase();
                                String Subject = "Boleta de Aluguel do Mês".trim();
                                String Body = "EM ANEXO BOLETA NO FORMATO PDF";
                                String[] Attachments = new String[] {System.getProperty("user.dir") + "/" + outFileName};
                                
                                Gmail service = GmailAPI.getGmailService();
                                MimeMessage Mimemessage = createEmailWithAttachment(To,"me",Subject,Body,new File(System.getProperty("user.dir") + "/" + outFileName));
                                Message message = createMessageWithEmail(Mimemessage);
                                message = service.users().messages().send("me", message).execute();

                                System.out.println("Message id: " + message.getId());
                                System.out.println(message.toPrettyString());
                                if (message.getId() != null) {
                                    conn.ExecutarComando("UPDATE recibo SET emailbol = 'S' WHERE contrato = '" + contrato + "' AND dtvencimento = '" +
                                        Dates.StringtoString(vencto, "dd/MM/yyyy", "yyyy/MM/dd") + "';");
                                    JOptionPane.showMessageDialog(null, "Enviado com sucesso!!!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Erro ao enviar!!!\n\nTente novamente...", "Atenção", JOptionPane.ERROR_MESSAGE);
                                }
                                String msg = (message.getId() != null ? "Ok" : "Err");
                                StatusEmail(outFileName, msg);
                                
//                                email.Send(To, null, Subject, Body, Attachments);
//                                if (!email.isSend()) {
//                                    JOptionPane.showMessageDialog(null, "Erro ao enviar!!!\n\nTente novamente...", "Atenção", JOptionPane.ERROR_MESSAGE);
//                                } else {
//                                    conn.ExecutarComando("UPDATE recibo SET emailbol = 'S' WHERE contrato = '" + contrato + "' AND dtvencimento = '" +
//                                        Dates.StringtoString(vencto, "dd/MM/yyyy", "yyyy/MM/dd") + "';");
//                                    JOptionPane.showMessageDialog(null, "Enviado com sucesso!!!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
//                                }
//                                String msg = (email.isSend() ? "Ok" : "Err");
//                                StatusEmail(outFileName, msg);
                            } catch (HeadlessException | IOException | GeneralSecurityException | MessagingException ex) {
                                ex.printStackTrace();
                            //} finally {
                            //    email = null;
                            }                
                        } else {
                            new toPrint(outFileName,VariaveisGlobais.Boleta.split(",")[0],VariaveisGlobais.Boleta.split(",")[1],VariaveisGlobais.Boleta.split(",")[2]);
                        }
                    } else {
                        new toPrint(outFileName,VariaveisGlobais.Boleta.split(",")[0],VariaveisGlobais.Boleta.split(",")[1],VariaveisGlobais.Boleta.split(",")[2]);
                    }
                }
            } catch (JRException e) { e.printStackTrace(); System.exit(1); } catch (Exception e) { e.printStackTrace(); System.exit(1); }
        }

        jGerar.setEnabled(true);
    }//GEN-LAST:event_jGerarActionPerformed

    private static void viewReportFrame( String titulo, JasperPrint print ) {
        JRViewer viewer = new JRViewer( print );
        JFrame frameRelatorio = new JFrame( titulo );
        frameRelatorio.add( viewer, BorderLayout.CENTER );
        frameRelatorio.setSize( 500, 500 );
        frameRelatorio.setExtendedState( JFrame.MAXIMIZED_BOTH );
        frameRelatorio.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
        frameRelatorio.setVisible( true );
    }    
    
    private void jperiodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jperiodoActionPerformed
        jInicial.setEnabled(true);
        jFinal.setEnabled(true);            
    }//GEN-LAST:event_jperiodoActionPerformed

    private void jemdiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jemdiaActionPerformed
        jInicial.setEnabled(false);
        jFinal.setEnabled(false);
    }//GEN-LAST:event_jemdiaActionPerformed

    private void jatrasadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jatrasadosActionPerformed
        jInicial.setEnabled(false);
        jFinal.setEnabled(false);
    }//GEN-LAST:event_jatrasadosActionPerformed

    private void jtodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtodosActionPerformed
        jInicial.setEnabled(false);
        jFinal.setEnabled(false);
    }//GEN-LAST:event_jtodosActionPerformed

    private void jchbPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchbPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jchbPreviewActionPerformed

    private void jcbSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSelectAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbSelectAllActionPerformed

    public void PorPeriodo() {
        String sContrato = "";
        if (!"".equals(jContrato.getText().trim())) { sContrato = " AND r.contrato = '" + jContrato.getText().trim() + "' "; }
        String Sql = "SELECT r.rgprp, r.rgimv, r.contrato, l.nomerazao, r.campo, r.dtvencimento, r.nnumero, c.dtultrecebimento, l.boleta, 1 gerados FROM RECIBO r, locatarios l, CARTEIRA c where l.boleta = -1 AND (r.tag <> 'X') AND (r.contrato = l.contrato and c.contrato = l.contrato) and (r.dtvencimento >= '" + Dates.DateFormata("yyyy-MM-dd", jInicial.getDate()) + "' AND r.dtvencimento <= '" + Dates.DateFormata("yyyy-MM-dd", jFinal.getDate()) + "') " + sContrato + " ORDER BY l.nomerazao;";
        ResultSet rs = conn.AbrirTabela(Sql, ResultSet.CONCUR_READ_ONLY);

        TableControl.header(jLista, new String[][] {{"rgprp","rgimv","contrato","nome","vencimento","nnumero"},{"0","0","120","500","100","0"}});

        jProgress.setVisible(true);
        int b = 0;
        try {
            rs.last();
            int rcount = rs.getRow();
            rs.beforeFirst();
            while (rs.next()) {
                String trgprp = String.valueOf(rs.getInt("rgprp"));
                String trgimv = String.valueOf(rs.getInt("rgimv"));
                String tcontrato = rs.getString("contrato").toUpperCase();
                String tnome = rs.getString("nomerazao").trim();
                String tvencto = Dates.DateFormata("dd-MM-yyyy", Dates.StringtoDate(rs.getString("dtvencimento").toUpperCase(),"yyyy-MM-dd"));
                String tpnnumero = "" + rs.getString("nnumero");
                if (!tpnnumero.contains("PIX")) tpnnumero = tpnnumero; else tpnnumero = "";
                String tnnumero = tpnnumero;
                
                TableControl.add(jLista, new String[][]{{trgprp, trgimv, tcontrato, tnome, tvencto, tnnumero},{"C","C","C","L","C","C"}}, true);

                int pgs = ((b++ * 100) / rcount) + 1;

                jProgress.setValue(pgs);
            }
        } catch (SQLException ex) {}
        jProgress.setVisible(false);
        DbMain.FecharTabela(rs);
    }

    public void EmDia() {
        String sContrato = "";
        if (!"".equals(jContrato.getText().trim())) { sContrato = " AND r.contrato = '" + jContrato.getText().trim() + "' "; }
        String Sql = "SELECT r.rgprp, r.rgimv, r.contrato, l.nomerazao, r.campo, r.dtvencimento, r.nnumero, c.dtultrecebimento, l.boleta, 1 gerados, l.envio FROM RECIBO r, locatarios l, CARTEIRA c where l.boleta = -1 AND (r.tag <> 'X') AND (r.contrato = l.contrato and c.contrato = l.contrato) and (r.dtvencimento >= '" + Dates.DateFormata("yyyy-MM-dd", new Date()) + "') " + sContrato + " ORDER BY l.nomerazao;";
        ResultSet rs = conn.AbrirTabela(Sql, ResultSet.CONCUR_READ_ONLY);

        TableControl.header(jLista, new String[][] {{"rgprp","rgimv","contrato","nome","vencimento","nnumero","#"},{"0","0","120","500","100","0","100"}});

        jProgress.setVisible(true);
        int b = 0;
        try {
            rs.last();
            int rcount = rs.getRow();
            rs.beforeFirst();
            while (rs.next()) {
                String trgprp = String.valueOf(rs.getInt("rgprp"));
                String trgimv = String.valueOf(rs.getInt("rgimv"));
                String tcontrato = rs.getString("contrato").toUpperCase();
                String tnome = rs.getString("nomerazao").trim();
                String tvencto = Dates.DateFormata("dd-MM-yyyy", Dates.StringtoDate(rs.getString("dtvencimento").toUpperCase(),"yyyy-MM-dd"));
                String tpnnumero = "" + rs.getString("nnumero");
                if (!tpnnumero.contains("PIX")) tpnnumero = tpnnumero; else tpnnumero = "";
                String tnnumero = tpnnumero;

                int tpenvio = rs.getInt("envio");
                String tenvio = "";
                if (tpenvio == 0) tenvio = "EM MÃOS";
                if (tpenvio == 1) tenvio = "EMAIL";
                if (tpenvio == 2) tenvio = "CORREIO";
                
                TableControl.add(jLista, new String[][]{{trgprp, trgimv, tcontrato, tnome, tvencto, tnnumero, tenvio},{"C","C","C","L","C","C","C"}}, true);

                int pgs = ((b++ * 100) / rcount) + 1;

                jProgress.setValue(pgs);
            }
        } catch (SQLException ex) {}
        jProgress.setVisible(false);
        DbMain.FecharTabela(rs);

        TableModel model = jLista.getModel();
        RowSorter sorter = new TableRowSorter(model);
        jLista.setRowSorter(sorter);
        jLista.getTableHeader().setDefaultRenderer(new MultisortTableHeaderCellRenderer());
    }

    public void Atrasados() {
        String sContrato = "";
        if (!"".equals(jContrato.getText().trim())) { sContrato = " AND r.contrato = '" + jContrato.getText().trim() + "' "; }
        String Sql = "SELECT r.rgprp, r.rgimv, r.contrato, l.nomerazao, r.campo, r.dtvencimento, r.nnumero, c.dtultrecebimento, l.boleta, 1 gerados, l.envio FROM RECIBO r, locatarios l, CARTEIRA c where l.boleta = -1 AND (r.tag <> 'X') AND (r.contrato = l.contrato and c.contrato = l.contrato) and (r.dtvencimento < '" + Dates.DateFormata("yyyy-MM-dd", new Date()) + "') " + sContrato + " ORDER BY l.nomerazao;";
        ResultSet rs = conn.AbrirTabela(Sql, ResultSet.CONCUR_READ_ONLY);

        TableControl.header(jLista, new String[][] {{"rgprp","rgimv","contrato","nome","vencimento","nnumero","#"},{"0","0","120","500","100","0","100"}});

        jProgress.setVisible(true);
        int b = 0;
        try {
            rs.last();
            int rcount = rs.getRow();
            rs.beforeFirst();
            while (rs.next()) {
                String trgprp = String.valueOf(rs.getInt("rgprp"));
                String trgimv = String.valueOf(rs.getInt("rgimv"));
                String tcontrato = rs.getString("contrato").toUpperCase();
                String tnome = rs.getString("nomerazao").trim();
                String tvencto = Dates.DateFormata("dd-MM-yyyy", Dates.StringtoDate(rs.getString("dtvencimento").toUpperCase(),"yyyy-MM-dd"));
                String tpnnumero = "" + rs.getString("nnumero");
                if (!tpnnumero.contains("PIX")) tpnnumero = tpnnumero; else tpnnumero = "";
                String tnnumero = tpnnumero;

                int tpenvio = rs.getInt("envio");
                String tenvio = "";
                if (tpenvio == 0) tenvio = "EM MÃOS";
                if (tpenvio == 1) tenvio = "EMAIL";
                if (tpenvio == 2) tenvio = "CORREIO";
                
                TableControl.add(jLista, new String[][]{{trgprp, trgimv, tcontrato, tnome, tvencto, tnnumero, tenvio},{"C","C","C","L","C","C","C"}}, true);

                int pgs = ((b++ * 100) / rcount) + 1;

                jProgress.setValue(pgs);
            }
        } catch (SQLException ex) {}
        jProgress.setVisible(false);
        DbMain.FecharTabela(rs);

        TableModel model = jLista.getModel();
        RowSorter sorter = new TableRowSorter(model);
        jLista.setRowSorter(sorter);
        jLista.getTableHeader().setDefaultRenderer(new MultisortTableHeaderCellRenderer());
        
    }

    public void Todos() {
        String sContrato = "";
        if (!"".equals(jContrato.getText().trim())) { sContrato = " AND r.contrato = '" + jContrato.getText().trim() + "' "; }
        String Sql = "SELECT r.rgprp, r.rgimv, r.contrato, l.nomerazao, r.campo, r.dtvencimento, r.nnumero, c.dtultrecebimento, l.boleta, 1 gerados, l.envio FROM RECIBO r, locatarios l, CARTEIRA c where l.boleta = -1 AND (r.tag <> 'X') AND (r.contrato = l.contrato and c.contrato = l.contrato) " + sContrato + " ORDER BY l.nomerazao;";
        ResultSet rs = conn.AbrirTabela(Sql, ResultSet.CONCUR_READ_ONLY);

        // Seta Cabecario
        TableControl.header(jLista, new String[][] {{"rgprp","rgimv","contrato","nome","vencimento","nnumero","#"},{"0","0","120","500","100","0","100"}});

        jProgress.setVisible(true);
        int b = 0;
        try {
            rs.last();
            int rcount = rs.getRow();
            rs.beforeFirst();
            while (rs.next()) {
                String trgprp = String.valueOf(rs.getInt("rgprp"));
                String trgimv = String.valueOf(rs.getInt("rgimv"));
                String tcontrato = rs.getString("contrato").toUpperCase();
                String tnome = rs.getString("nomerazao").trim();
                String tvencto = Dates.DateFormata("dd-MM-yyyy", Dates.StringtoDate(rs.getString("dtvencimento").toUpperCase(),"yyyy-MM-dd"));
                String tpnnumero = "" + rs.getString("nnumero");
                if (!tpnnumero.contains("PIX")) tpnnumero = tpnnumero; else tpnnumero = "";
                String tnnumero = tpnnumero;

                int tpenvio = rs.getInt("envio");
                String tenvio = "";
                if (tpenvio == 0) tenvio = "EM MÃOS";
                if (tpenvio == 1) tenvio = "EMAIL";
                if (tpenvio == 2) tenvio = "CORREIO";
                
                TableControl.add(jLista, new String[][]{{trgprp, trgimv, tcontrato, tnome, tvencto, tnnumero, tenvio},{"C","C","C","L","C","C","C"}}, true);

                int pgs = ((b++ * 100) / rcount) + 1;

                jProgress.setValue(pgs);
            }
        } catch (SQLException ex) {}
        jProgress.setVisible(false);
        DbMain.FecharTabela(rs);
        
        TableModel model = jLista.getModel();
        RowSorter sorter = new TableRowSorter(model);
        jLista.setRowSorter(sorter);
        jLista.getTableHeader().setDefaultRenderer(new MultisortTableHeaderCellRenderer());
    }

    private int AchaVazio(String[][] value) {
        int r = -1;
        for (int i=0;i<value.length;i++) if (value[i][0] == null || "".equals(value[i][0])) {r = i; break;}
        return r;
    }

    public String[][] Recalcula(String rgprp, String rgimv, String contrato, String vencimento) {
        String[][] linhas = null;
        try {
            linhas = MontaTela(rgprp, rgimv, contrato, vencimento);
        } catch (Exception ex) {} 

        return linhas;
    }

    private String IPTU(String vecto, String campo, String rgimv) {
        String pIptu = ""; Integer pant = 0;
        try { pIptu = conn.LerParametros("IPTU"); } catch (Exception e) {}
        try { pant = Integer.valueOf(conn.LerParametros("IPTUANT"));  } catch (Exception e) {}
        if (pIptu == null || pIptu.equalsIgnoreCase("")) return campo;
        
        Boolean eiptu = campo.contains(pIptu + ":");
        if (eiptu) return campo;
        
        String[] meses = {"","jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"};
        String ddia = Dates.StringtoString(vecto, "dd-MM-yyyy", "dd-MM-yyyy").substring(0, 2);
        String dmes = Dates.StringtoString(vecto, "dd-MM-yyyy", "dd-MM-yyyy").substring(3, 5);
        String dano  = Dates.StringtoString(vecto, "dd-MM-yyyy", "dd-MM-yyyy").substring(6, 10);
        String umes = Dates.DateFormata("dd-MM-yyyy", new Date()).substring(3, 5);
        String uano = Dates.DateFormata("dd-MM-yyyy", new Date()).substring(6, 10);
        
        String wmes = ""; String wValor = "0000000000";
        
        String wSql = "SELECT p.* FROM iptu p, imoveis i WHERE InStr(i.matriculas,p.matricula) > 0 AND p.ano = '" + dano + "' AND i.rgimv = '" + rgimv + "';";
        ResultSet ws = conn.AbrirTabela(wSql, ResultSet.CONCUR_READ_ONLY);
        try {
            while (ws.next()) {
                wmes = ws.getString(meses[Integer.valueOf(dmes)]);
                String[] avar = wmes.split(";");
                if (avar.length > 0) {
                    for (int i=0;i<avar.length;i++) {
                        String[] rvar = avar[i].split(",");
                        if (!rvar[0].trim().equalsIgnoreCase("")) {
                            if (Dates.DateDiff(Dates.DIA, new Date(), Dates.DateAdd(Dates.DIA, (pant * -1), Dates.StringtoDate(rvar[0], "dd-MM-yyyy"))) > 0) {
                                wValor = rvar[1];
                                break;
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {}
        return campo + ";" + (!wValor.equalsIgnoreCase("0000000000") ? pIptu + ":2:" + wValor + ":0000:NT:RZ:ET:IP" : "");
    }
    
    public String[][] MontaTela(String rgprp, String rgimv, String contrato, String vecto) throws SQLException, ParseException {

        String sql = "SELECT * FROM RECIBO WHERE contrato = '" + contrato + "' AND dtvencimento = '" + Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(vecto, "dd/MM/yyyy")) + "';";
        ResultSet pResult = conn.AbrirTabela(sql, ResultSet.CONCUR_UPDATABLE);

        String[][] linhas = null;
        if (pResult.first()) {
            String tcampo = IPTU(vecto, pResult.getString("campo"), rgimv);
            DepuraCampos a = new DepuraCampos(tcampo);
            VariaveisGlobais.ccampos = tcampo;

//            DepuraCampos a = new DepuraCampos(pResult.getString("campo"));
//            VariaveisGlobais.ccampos = pResult.getString("campo");
            linhas = new String[14][3];

            a.SplitCampos();
            // Ordena Matriz
            Arrays.sort(a.aCampos, new Comparator()
            {
            private int pos1 = 3;
            private int pos2 = 4;
            @Override
            public int compare(Object o1, Object o2) {
                String p1 = ((String)o1).substring(pos1, pos2);
                String p2 = ((String)o2).substring(pos1, pos2);
                return p1.compareTo(p2);
            }
            });

            // Monta campos
            for (int i=0; i<= a.length() - 1; i++) {
                String[] Campo = a.Depurar(i);
                if (Campo.length > 0) {
                    //MontaCampos(Campo, i);
                    linhas[i][0] = Campo[0];
                    linhas[i][1] = ("00/00".equals(Campo[3]) || "00/0000".equals(Campo[3]) || "".equals(Campo[3]) ? "-" : Campo[3]) ;
                    linhas[i][2] = Campo[1];
                }
            }
        }

        DbMain.FecharTabela(pResult);

        return linhas;
    }

    private float[] CalcularRecibo(String rgprp, String rgimv, String contrato, String vecto) {
        if ("".equals(vecto.trim())) { return null; }

        Calculos rc = new Calculos();
        try {
            rc.Inicializa(rgprp, rgimv, contrato);
        } catch (SQLException ex) {}

        String campo = ""; String rcampo = ""; boolean mCartVazio = false;
        String sql = "SELECT * FROM RECIBO WHERE contrato = '" + contrato + "' AND dtvencimento = '" + Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(vecto, "dd/MM/yyyy")) + "';";
        ResultSet pResult = conn.AbrirTabela(sql, ResultSet.CONCUR_UPDATABLE);
        try {
            if (pResult.first()) {
                campo = pResult.getString("campo");

                // Aqui recebe o IPTU
                campo = IPTU(vecto, campo, rgimv);
                
                rcampo = campo;
                mCartVazio = ("".equals(rcampo.trim()));
            }
        } catch (SQLException ex) { rcampo = ""; }
        DbMain.FecharTabela(pResult);

        float exp = 0, multa = 0, juros = 0, correcao = 0;
        try { exp = rc.TaxaExp(campo); } catch (SQLException ex) {}
        try { multa = rc.Multa(campo, vecto, false); } catch (SQLException ex) {}
        try { juros = rc.Juros(campo, vecto); } catch (SQLException ex) {}
        try { correcao = rc.Correcao(campo, vecto); } catch (SQLException ex) {}

        float tRecibo = 0;
        tRecibo = Calculos.RetValorCampos(campo);
        tRecibo += exp + multa + juros + correcao;

        float[] retorno = new float[5];
        retorno[0] = exp; retorno[1] = multa; retorno[2] = juros; retorno[3] = correcao; retorno[4] = tRecibo;
        return retorno;
    }

    public void StatusEmail(String nome, String status) {
        TableControl.add(jEmailStatus, new String[][]{{nome, ("".equals(status) ? "OK" : status)},{"L","C"}}, true);
    }

    private String ChecaTermino(String contrato) {
        String msg = "";        
        String[][] campos = null;
        try {
            campos = conn.LerCamposTabela(new String[] {"dtinicio","dttermino","dtadito","dtseguro",
                    FuncoesGlobais.Subst("((Month(StrDate(dttermino)) = &1. AND Year(StrDate(dttermino)) = &2.)) AS pinta",
                    new String[] {String.valueOf(Dates.iMonth(new Date())), String.valueOf(Dates.iYear(new Date()))})}, "CARTEIRA", 
                    FuncoesGlobais.Subst("contrato = '" + contrato + "' AND ((Month(StrDate(dtinicio)) >= &1. AND " + 
                    "Year(StrDate(dttermino)) >= &2.) OR (Month(StrDate(dttermino)) >= &1. AND Year(StrDate(dttermino)) = &2.))",
                    new String[] {String.valueOf(Dates.iMonth(new Date())), String.valueOf(Dates.iYear(new Date()))}));
        } catch (Exception e) {}
        if (campos != null) {
            String tmesanor = campos[3][3]; if (tmesanor == null) tmesanor = "";
            String tdtini = campos[0][3];
            Date _inic = Dates.StringtoDate(tdtini,"dd/MM/yyyy");
            Date _comp = new Date();
            if (_inic.getYear() != _comp.getYear()) {   
                if (tmesanor.isEmpty()) {
                    String meses = null;
                    try {meses = conn.LerParametros("REAJNUM");} catch (Exception e) {meses = "1";}
                    if (_inic.getMonth() - 1 >= _comp.getMonth() - 1) {
                        if (((_inic.getMonth() - 1) - (_comp.getMonth() - 1)) <= Integer.valueOf(meses)) {
                            if (((_inic.getMonth() - 1) - (_comp.getMonth() - 1)) > 0) {
                                msg = "Faltam " + ((_inic.getMonth() - 1) - (_comp.getMonth() - 1)) + " Mes(es) para o reajuste!!!";
                            } else msg = "";
                        }
                    } else if (_inic.getMonth() == _comp.getMonth()) {
                        msg = "Este é o mês do reajuste!!!";
                        if (campos[4][3].equals("1")) msg += "    Termino de contrato!!!";
                    }
                } else {
                    boolean reaj = Integer.valueOf(tmesanor.substring(3,7)) >= Dates.iYear(new Date());
                    if (!reaj) {
                        if (_inic.getMonth() - 1 > _comp.getMonth() - 1) {
                            String meses = null;
                            try {meses = conn.LerParametros("REAJNUM");} catch (Exception e) {meses = "1";}
                            msg = "Faltam " + meses + " Mes(es) para o reajuste!!!";
                        } else if (_inic.getMonth() == _comp.getMonth()) {
                            msg = "Este é o mês do reajuste!!!";
                            if (campos[4][3].equals("1")) msg += "    Termino de contrato!!!";
                        }
                    }
                }
            }

        }
        return msg;
    }
    
    private Boleta CreateBoleta(String rgprp, String rgimv, String contrato, String vencto, boolean reimp, String rnnumero) throws SQLException {
        bancos.LerBanco(contrato);

        Collections gVar = VariaveisGlobais.dCliente;

        Boleta bean1 = new Boleta();
        bean1.setempNome(gVar.get("empresa").toUpperCase().trim());
        bean1.setempEndL1(gVar.get("endereco") + ", " + gVar.get("numero") + gVar.get("complemento") + " - " + gVar.get("bairro"));
        bean1.setempEndL2(gVar.get("cidade") + " - " + gVar.get("estado") + " - CEP " + gVar.get("cep"));
        bean1.setempEndL3("Tel/Fax.: " + gVar.get("telefone"));
        bean1.setempEndL4(gVar.get("hpage") + " / " + gVar.get("email"));

        // Logo da Imobiliaria
        bean1.setlogoLocation("resources/logos/boleta/" + VariaveisGlobais.icoBoleta);

        String[][] msgboleta = null;
        try {
            msgboleta = conn.LerCamposTabela(new String[] {"msgboleta","dtnasc"}, "locatarios", "contrato = '" + contrato + "'");
        } catch (SQLException e) {}
        
        String mbol = "" + conn.LerParametros("MSGBOL10");
        if (msgboleta != null) {
            if (!msgboleta[0][3].isEmpty()) mbol = msgboleta[0][3];
        }
        bean1.setlocaMsgL01(mbol);

        String txtAniversario = "";
        if ("TRUE".equals(conn.LerParametros("ANIVERSARIO").toUpperCase())) {
            txtAniversario = "" + conn.LerParametros("MSGANIVERSARIO");
        } else {
            if (("TRUE".equals(conn.LerParametros("FERIADOS").toUpperCase()))) { }
        }

        String msg = ChecaTermino(contrato);
        if (!msg.trim().equals("")) {
            bean1.setlocaMsgL02(msg);
        } else {
            if (msgboleta != null) {
                if (msgboleta[1][3] != null) {
                    if (Dates.DateFormata("MM", Dates.StringtoDate(msgboleta[1][3].substring(0, 10), "yyyy-MM-dd")).equals(Dates.DateFormata("MM", Dates.StringtoDate(vencto,"dd-MM-yyyy")))) {
                        bean1.setlocaMsgL02(txtAniversario);
                    }
                }
            }
        }

        // Logo do Banco
        bean1.setlogoBanco(bancos.getLogo());
        bean1.setnumeroBanco(bancos.getBanco() + "-" + bancos.getBancoDv());

        String[][] linhas = Recalcula(rgprp, rgimv, contrato, vencto);
        float[] totais = CalcularRecibo(rgprp, rgimv, contrato, vencto);

        // exp, mul, jur, cor
        //float expediente = totais[0], multa = totais[1], juros = totais[2], correcao = totais[3];
        float expediente = 0, multa = 0, juros = 0, correcao = 0;
        
        if (VariaveisGlobais.boletoEP || VariaveisGlobais.boletoSomaEP) expediente = totais[0];
        if (VariaveisGlobais.boletoMU) { multa = totais[1]; } else { totais[4] -= totais[1]; }
        if (VariaveisGlobais.boletoJU) { juros = totais[2]; } else { totais[4] -= totais[2]; }
        if (VariaveisGlobais.boletoCO) { correcao = totais[3]; } else { totais[4] -= totais[3]; }
        float tRecibo = totais[4];
        
        DecimalFormat df = new DecimalFormat("#,##0.00");
        df.format(multa);

        if ((VariaveisGlobais.boletoEP && expediente > 0) && !VariaveisGlobais.boletoSomaEP) {
            int pos = AchaVazio(linhas);
            if (pos > -1) {
                linhas[pos][0] = gVar.get("EP");
                linhas[pos][1] = "-";
                linhas[pos][2] = df.format(expediente);
            }
        } else if (VariaveisGlobais.boletoEP && VariaveisGlobais.boletoSomaEP) {
            float alrec = LerValor.StringToFloat(linhas[0][2]);
            linhas[0][2] = LerValor.floatToCurrency(alrec + expediente, 2);
            expediente = 0;
        } else if (!VariaveisGlobais.boletoEP && !VariaveisGlobais.boletoSomaEP) {
            tRecibo -= totais[0];
            expediente = 0;
        }

        if (multa > 0) {
            int pos = AchaVazio(linhas);
            if (pos > -1) {
                linhas[pos][0] = gVar.get("MU");
                linhas[pos][1] = "-";
                linhas[pos][2] = df.format(multa);
            }
        }

        if (juros > 0) {
            int pos = AchaVazio(linhas);
            if (pos > -1) {
                linhas[pos][0] = gVar.get("JU");
                linhas[pos][1] = "-";
                linhas[pos][2] = df.format(juros);
            }
        }

        if (correcao > 0) {
            int pos = AchaVazio(linhas);
            if (pos > -1) {
                linhas[pos][0] = gVar.get("CO");
                linhas[pos][1] = "-";
                linhas[pos][2] = df.format(correcao);
            }
        }

        try {
            bean1.setlocaDescL01(linhas[0][0]);
            bean1.setlocaCpL01(linhas[0][1]);
            bean1.setlocaVrL01(linhas[0][2]);
            bean1.setlocaDescL02(linhas[1][0]); 
            bean1.setlocaCpL02(linhas[1][1]);
            bean1.setlocaVrL02(linhas[1][2]);
            bean1.setlocaDescL03(linhas[2][0]);
            bean1.setlocaCpL03(linhas[2][1]);
            bean1.setlocaVrL03(linhas[2][2]);
            bean1.setlocaDescL04(linhas[3][0]);
            bean1.setlocaCpL04(linhas[3][1]);
            bean1.setlocaVrL04(linhas[3][2]);
            bean1.setlocaDescL05(linhas[4][0]);
            bean1.setlocaCpL05(linhas[4][1]);
            bean1.setlocaVrL05(linhas[4][2]);
            bean1.setlocaDescL06(linhas[5][0]);
            bean1.setlocaCpL06(linhas[5][1]);
            bean1.setlocaVrL06(linhas[5][2]);
            bean1.setlocaDescL07(linhas[6][0]);
            bean1.setlocaCpL07(linhas[6][1]);
            bean1.setlocaVrL07(linhas[6][2]);
            bean1.setlocaDescL08(linhas[7][0]);
            bean1.setlocaCpL08(linhas[7][1]);
            bean1.setlocaVrL08(linhas[7][2]);
            bean1.setlocaDescL09(linhas[8][0]);
            bean1.setlocaCpL09(linhas[8][1]);
            bean1.setlocaVrL09(linhas[8][2]);
            bean1.setlocaDescL10(linhas[9][0]);
            bean1.setlocaCpL10(linhas[9][1]);
            bean1.setlocaVrL10(linhas[9][2]);
            bean1.setlocaDescL11(linhas[10][0]);
            bean1.setlocaCpL11(linhas[10][1]);
            bean1.setlocaVrL11(linhas[10][2]);
            bean1.setlocaDescL12(linhas[11][0]);
            bean1.setlocaCpL12(linhas[11][1]);
            bean1.setlocaVrL12(linhas[11][2]);
            bean1.setlocaDescL13(linhas[12][0]);
            bean1.setlocaCpL13(linhas[12][1]);
            bean1.setlocaVrL13(linhas[12][2]);
            bean1.setlocaDescL14(linhas[13][0]);
            bean1.setlocaCpL14(linhas[13][1]);
            bean1.setlocaVrL14(linhas[13][2]);
        } catch (Exception ex) {}

        bean1.setbolDadosVencimento(vencto);

        String cValor = bancos.Valor4Boleta(LerValor.floatToCurrency(tRecibo,2));  // valor da boleta
        bean1.setbolDadosVrdoc(df.format(tRecibo));

        String banco = "";
        if (bancos.getBanco().equalsIgnoreCase("104")) {
            banco = "cef";
        } else if (bancos.getBanco().equalsIgnoreCase("341")) {
            banco = "itau";
        } else if (bancos.getBanco().equalsIgnoreCase("033")) {
            banco = "santander";
        } else if (bancos.getBanco().equalsIgnoreCase("001")) {
            banco = "bb";
        } else if (bancos.getBanco().equalsIgnoreCase("237")) {
            banco = "bd";
        } else banco = "";
        
        String nNumero = "";
        
        if (reimp) {
            nNumero = rnnumero.substring(0, rnnumero.length() - 1);
        } else {
            nNumero = FuncoesGlobais.StrZero(bancos.getNnumero().trim(),11); 
        
            // Atualizar Nosso Numero
            Double innumero = Double.valueOf(nNumero);
            if (innumero != 0) {
                bancos.GravarNnumero(bancos.getBanco(), String.valueOf(innumero + 1));
            } else {
                JOptionPane.showMessageDialog(null, "Nosso numero não pode ser 0(ZERO)!!!\nContacte o administrador do sistema.\nTel.:(21)2701-0261 / 98552-1405");
                System.exit(1);
            }
        }
        
        if (banco.equalsIgnoreCase("itau")) {
            nNumero =  itau.NossoNumeroItau(nNumero, 9);                    
        } else if (banco.equalsIgnoreCase("cef")) {
            nNumero =  CEF.NossoNumero(nNumero, 16);                                        
        } else if (banco.equalsIgnoreCase("santander")) {
            nNumero =  Santander.NossoNumero(nNumero, 13);
        } else if (banco.equalsIgnoreCase("bb")) {
            nNumero = bb.NossoNumeroBB(bancos.getBancoDv(),nNumero);
        } else if (banco.equalsIgnoreCase("bd")) {
            nNumero = bradesco.NossoNumeroBradesco(nNumero.substring(0, 11),bancos.getCarteira());
        }

        String showCarteira = ""; String showNossoNumero = ""; 
        if (banco.equalsIgnoreCase("itau")) {
            showCarteira = bancos.getCarteira();
            showNossoNumero = bancos.getCarteira() + "/" + nNumero.substring(0, nNumero.length() -1) + "-" + nNumero.substring(nNumero.length() - 1, nNumero.length());
        } else if (banco.equalsIgnoreCase("cef")) {
            showCarteira = "SR";
            showNossoNumero = bancos.getCarteira() +  nNumero.substring(0, nNumero.length() -1) + "-" + nNumero.substring(nNumero.length() - 1, nNumero.length());
        } else if (banco.equalsIgnoreCase("santander")) {
            showCarteira = bancos.getCarteira();
            showNossoNumero = nNumero.substring(0, nNumero.length() -1) + "-" + nNumero.substring(nNumero.length() - 1, nNumero.length());
        } else if (banco.equalsIgnoreCase("bb")) {
            showCarteira = bancos.getCarteira();
            showNossoNumero = nNumero.substring(0, nNumero.length() -1) + "-" + nNumero.substring(nNumero.length() - 1, nNumero.length());
        } else if (banco.equalsIgnoreCase("bd")) {
            showCarteira = bancos.getCarteira();
            showNossoNumero = bancos.getCarteira() + "/" + nNumero.substring(0, 11) + "-" + nNumero.substring(11, 12);
        }

        if (!reimp) {
            try {
                String recUpdSql = "UPDATE RECIBO SET NNUMERO = '" + bancos.getBanco() + StringManager.Right(nNumero,12) + 
                                "', remessa = 'N' WHERE contrato = '" + contrato + "' AND " +
                                "dtvencimento = '" + Dates.DateFormata("yyyy-MM-dd",
                                Dates.StringtoDate(vencto, "dd/MM/yyyy")) + "';";
                conn.ExecutarComando(recUpdSql);
            } catch (Exception err) {err.printStackTrace();}
        }
        
        String cdBarras = ""; String lnDig = "";
        if (banco.toLowerCase().equalsIgnoreCase("itau")) {
            cdBarras = itau.CodBar(vencto, cValor,nNumero);
            lnDig = itau.LinhaDigitavel(cdBarras);  
        } else if (banco.toLowerCase().equalsIgnoreCase("cef")) {
            cdBarras = CEF.CodBar(vencto,cValor,nNumero);
            lnDig = CEF.linhadigitavel(nNumero,vencto,cValor);
        } else if (banco.toLowerCase().equalsIgnoreCase("santander")) {
            cdBarras = Santander.CodBar(vencto, cValor, nNumero);
            lnDig = Santander.LinhaDigitavel(nNumero, cdBarras.substring(4, 5), vencto, cValor);
        } else if (banco.toLowerCase().equalsIgnoreCase("bb")) {
            cdBarras = bb.CodBar(vencto, cValor, nNumero.substring(0, 11));
            lnDig = bb.LinhaDigitavel(cdBarras, cdBarras.substring(4, 5), vencto, cValor);
        } else if (banco.toLowerCase().equalsIgnoreCase("bd")) {
            cdBarras = bradesco.CodBar(vencto, cValor, nNumero.substring(0, 11));
            lnDig = bradesco.LinhaDigitavel(cdBarras, vencto, cValor);
        }

        if (banco.toLowerCase().equalsIgnoreCase("itau")) {
            bean1.setbolDadosAgcodced(bancos.getAgencia() + " / " + bancos.getConta() + "-" + bancos.getCtaDv());
        } else if (banco.toLowerCase().equalsIgnoreCase("cef")) {
            bean1.setbolDadosAgcodced(bancos.getAgencia() + " / " + bancos.getConta() + "-" + bancos.getCtaDv());
        } else if (banco.toLowerCase().equalsIgnoreCase("santander")) {
            bean1.setbolDadosAgcodced(bancos.getAgencia() + "-" + Santander.CalcDig11N(bancos.getAgencia()) + " / " + bancos.getCtaDv());
        } else if (banco.toLowerCase().equalsIgnoreCase("bb")) {
            bean1.setbolDadosAgcodced(FuncoesGlobais.StrZero(bancos.getAgencia(),5) + "-" + bb.CalcDig11N(FuncoesGlobais.StrZero(bancos.getAgencia(),5)) + " / " + 
                                      FuncoesGlobais.StrZero(bancos.getCtaDv(),12) + "-" + bb.CalcDig11N(FuncoesGlobais.StrZero(bancos.getCtaDv(),12)));
        } else if (banco.toLowerCase().equalsIgnoreCase("bd")) {
            bean1.setbolDadosAgcodced(bancos.getAgencia() + 
                    "-" + bradesco.CalcDig11Bradesco(bancos.getAgencia()) + 
                    " / " + FuncoesGlobais.StrZero(bancos.getCtaDv(),7) + 
                    "-" + bradesco.CalcDig11Bradesco(bancos.getCtaDv()) 
            );
        }

        bean1.setbolDadosNnumero(showNossoNumero);
        bean1.setbolDadosNumdoc(rgprp + "/" + contrato);

        String[][] dadosSac = conn.LerCamposTabela(new String[] {"nomerazao", "cpfcnpj"}, "locatarios", "contrato = '" + contrato + "'");

        bean1.setsacDadosNome(dadosSac[0][3]);  // Nome do Sacado
        bean1.setsacDadosCpfcnpj("CNPJ/CPF: " + dadosSac[1][3]);  // Cpf ou Cnpj do Sacado

        String[][] endSac = conn.LerCamposTabela(new String[] {"end", "num", "compl", "bairro", "cidade", "estado", "cep"}, "imoveis", "rgimv = '" + rgimv + "'");
        bean1.setsacDadosEndereco(endSac[0][3]);
        bean1.setsacDadosNumero(endSac[1][3]);
        bean1.setsacDadosCompl(endSac[2][3]);
        bean1.setsacDadosBairro(endSac[3][3]);
        bean1.setsacDadosCidade(endSac[4][3]);
        bean1.setsacDadosEstado(endSac[5][3]);
        bean1.setsacDadosCep(endSac[6][3]);

        bean1.setcodDadosDigitavel(lnDig);
        bean1.setcodDadosBarras(cdBarras);

        
        String msgCabBol01 = conn.LerParametros("MSGCABBOL1"); if (msgCabBol01 == null) msgCabBol01 = "";
        String msgCabBol02 = conn.LerParametros("MSGCABBOL2"); if (msgCabBol02 == null) msgCabBol02 = "";
        String msgCabBolDoc = conn.LerParametros("MSGCABBOLDOC"); if (msgCabBolDoc == null) msgCabBolDoc = "";

        if (!msgCabBol01.isEmpty() && !msgCabBol02.isEmpty() && !msgCabBolDoc.isEmpty()) {
            bean1.setbcoMsgL01(msgCabBol01);
            bean1.setbcoMsgL02(msgCabBol02);
            bean1.setbolDadosEspeciedoc(msgCabBolDoc);
        } else {
            if (banco.toLowerCase().equalsIgnoreCase("itau")) {
                bean1.setbcoMsgL01("ATÉ O VENCIMENTO, PAGAVEL EM QUALQUER BANCO OU PELA INTERNET.");
                bean1.setbcoMsgL02("APÓS O VENCIMENTO, SOMENTE NO BANCO ITAU..");
                bean1.setbolDadosEspeciedoc("RC");
            } else if (banco.toLowerCase().equalsIgnoreCase("cef")) {
                bean1.setbcoMsgL01("PAGAR PREFERENCIALMENTE NAS CASAS LOTERICAS ATE O VALOR LIMITE");
                bean1.setbcoMsgL02("");
                bean1.setbolDadosEspeciedoc("RC");
            } else if (banco.toLowerCase().equalsIgnoreCase("santander")) {
                bean1.setbcoMsgL01("ATÉ O VENCIMENTO, PAGAVEL EM QUALQUER BANCO OU PELA INTERNET.");
                bean1.setbcoMsgL02("APÓS O VENCIMENTO, SOMENTE NO BANCO SANTANDER..");
                bean1.setbolDadosEspeciedoc("DM");
            } else if (banco.toLowerCase().equalsIgnoreCase("bb")) {
                bean1.setbcoMsgL01("ATÉ O VENCIMENTO, PAGAVEL EM QUALQUER BANCO OU PELA INTERNET.");
                bean1.setbcoMsgL02("APÓS O VENCIMENTO, SOMENTE NO BANCO BANCO DO BRASIL..");
                bean1.setbolDadosEspeciedoc("RC");            
            } else if (banco.toLowerCase().equalsIgnoreCase("bd")) {
                bean1.setbcoMsgL01("ATÉ O VENCIMENTO, PAGAVEL EM QUALQUER BANCO OU PELA INTERNET.");
                bean1.setbcoMsgL02("APÓS O VENCIMENTO, SOMENTE NO BANCO BRADESCO S/A..");
                bean1.setbolDadosEspeciedoc("RC");            
            }
        }
        
        bean1.setbolDadosCedente(gVar.get("empresa").toUpperCase() + (VariaveisGlobais.ShowDocBoleta ? "   - CNPJ: " + gVar.get("cnpj") : ""));
        bean1.setbolDadosDatadoc(Dates.DatetoString(new Date()));
        bean1.setbolDadosAceite("N");
        bean1.setbolDadosDtproc(Dates.DatetoString(new Date()));
        bean1.setbolDadosUsobco("");
        bean1.setbolDadosCarteira(showCarteira);
        bean1.setbolDadosEspecie("R$");
        bean1.setbolDadosQtde("");
        bean1.setbolDadosValor("");
 
        String msgBol01 = conn.LerParametros("MSGBOL1"); if (msgBol01 == null) msgBol01 = "";
        String msgBol02 = conn.LerParametros("MSGBOL2"); if (msgBol02 == null) msgBol02 = "";
        String msgBol03 = conn.LerParametros("MSGBOL3"); if (msgBol03 == null) msgBol03 = "";
        String msgBol04 = conn.LerParametros("MSGBOL4"); if (msgBol04 == null) msgBol04 = "";
        String msgBol05 = conn.LerParametros("MSGBOL5"); if (msgBol05 == null) msgBol05 = "";
        String msgBol06 = conn.LerParametros("MSGBOL6"); if (msgBol06 == null) msgBol06 = "";
        String msgBol07 = conn.LerParametros("MSGBOL7"); if (msgBol07 == null) msgBol07 = "";
        String msgBol08 = conn.LerParametros("MSGBOL8"); if (msgBol08 == null) msgBol08 = "";
        String msgBol09 = conn.LerParametros("MSGBOL9"); if (msgBol09 == null) msgBol09 = "";

        bean1.setbolDadosMsg01(msgBol01);
        bean1.setbolDadosMsg02(msgBol02);
        bean1.setbolDadosMsg03(msgBol03);
        bean1.setbolDadosMsg04(msgBol04);
        bean1.setbolDadosMsg05(msgBol05);
        bean1.setbolDadosMsg06(msgBol06);
        bean1.setbolDadosMsg07(msgBol07);

        Calculos rc = new Calculos();
        try {
            rc.Inicializa(rgprp, rgimv, contrato);
        } catch (SQLException ex) {}
        Date tvecto = Dates.StringtoDate(vencto,"dd/MM/yyyy");
        String carVecto = Dates.DateFormata("dd/MM/yyyy", 
                        Dates.DateAdd(Dates.DIA, (int)rc.dia_mul, tvecto));

        String ln08 = "";
        if ("".equals(msgBol08)) {
            ln08 = "APÓS O DIA " + carVecto + " MULTA DE 2% + ENCARGOS DE 0,333% AO DIA DE ATRASO.";
        } else {
            // [VENCIMENTO] - Mostra Vencimento
            // [CARENCIA] - Mostra Vencimento + Carencia
            // [MULTA] - Mostra Juros
            // [ENCARGOS] - Mostra Encargos
            ln08 = msgBol08.replace("[VENCIMENTO]", Dates.DateFormata("dd/MM/yyyy", tvecto));
            ln08 = ln08.replace("[CARENCIA]", carVecto);
            ln08 = ln08.replace("[MULTA]", String.valueOf(rc.TipoImovel().equalsIgnoreCase("RESIDENCIAL") ? rc.multa_res : rc.multa_com).replace(".0", "") + "%");
            ln08 = ln08.replace("[ENCARGOS]", "0,033%");
        }
        bean1.setbolDadosMsg08(ln08);
//        bean1.setbolDadosMsg08("".equals(msgBol08) ? "APÓS O DIA " + carVecto + 
//            " MULTA DE " + (rc.TipoImovel().equalsIgnoreCase("RESIDENCIAL") ? rc.multa_res : rc.multa_com) + "% + ENCARGOS DE 0,333% AO DIA DE ATRASO." : "" + msgBol08);
        bean1.setbolDadosMsg09("".equals(msgBol09) ? "NÃO RECEBER APÓS 30 DIAS DO VENCIMENTO." : msgBol09);
        bean1.setbolDadosDesconto("");
        bean1.setbolDadosMora("");
        bean1.setbolDadosVrcobrado("");

        return bean1;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup gCondicao;
    private javax.swing.JFormattedTextField jContrato;
    private javax.swing.JTable jEmailStatus;
    private com.toedter.calendar.JDateChooser jFinal;
    private javax.swing.JButton jGerar;
    private com.toedter.calendar.JDateChooser jInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTable jLista;
    private javax.swing.JButton jListar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPeriodo;
    private javax.swing.JProgressBar jProgress;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.ButtonGroup jTipoEmail;
    private javax.swing.JRadioButton jatrasados;
    private javax.swing.JCheckBox jcbSelectAll;
    private javax.swing.JCheckBox jchbPreview;
    private javax.swing.JRadioButton jemdia;
    private javax.swing.JRadioButton jperiodo;
    private javax.swing.JRadioButton jtodos;
    // End of variables declaration//GEN-END:variables

}
