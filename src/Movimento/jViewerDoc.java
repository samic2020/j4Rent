package Movimento;

import Funcoes.Dates;
import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.LerValor;
import Funcoes.Pad;
import Funcoes.StringManager;
import Funcoes.VariaveisGlobais;
import Funcoes.gmail.GmailAPI;
import static Funcoes.gmail.GmailOperations.createEmailWithAttachment;
import static Funcoes.gmail.GmailOperations.createMessageWithEmail;
import Funcoes.jPDF;
import Funcoes.jTableControl;
import Funcoes.tempFile;
import Funcoes.toPreview;
import Funcoes.toPrint;
import Protocolo.DepuraCampos;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.Message;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BarcodeInter25;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.lowagie.text.Element;
import j4rent.Partida.Collections;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.io.File;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import javax.mail.internet.MimeMessage;
import javax.swing.JCheckBox;
import javax.swing.JEditorPane;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.UIDefaults;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class jViewerDoc extends javax.swing.JInternalFrame {
    private JEditorPane _htmlPane = new JEditorPane();
    Db db = new Db();
    jTableControl tabela = new jTableControl(true);    
    TableRowSorter<TableModel> sorter;
    
    /**
     * Creates new form jViewerDoc
     */
    public jViewerDoc() {
        initComponents();

        conDataInicial.setDate(Dates.primeiraDataMes(new Date()));
        conDataFinal.setDate(Dates.ultimoDataMes(new Date()));
        

        tipo.setEnabled(true);
        conDataInicial.setEnabled(true);
        conDataFinal.setEnabled(true);
        conBtnListar.setEnabled(true);
        btPreview.setEnabled(false);
        btRetornar.setEnabled(false);        
        jbtSend.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tipo = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        conDataInicial = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel11 = new javax.swing.JLabel();
        conDataFinal = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        conBtnListar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSubject = new javax.swing.JTextField();
        jbtSend = new javax.swing.JButton();
        jPara = new javax.swing.JTextField();
        jBuscar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMensagem = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnClear = new javax.swing.JLabel();
        filtro = new javax.swing.JTextField();
        btPreview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tFiles = new javax.swing.JTable();
        btRetornar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle(".:: Re-Impressão de Documentos");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Recibos", "Boletas", "Extratos", "Avisos" }));

        jLabel10.setText("Periodo:");

        conDataInicial.setDate(new java.util.Date(-2208977612000L));

        jLabel11.setText("até");

        conDataFinal.setDate(new java.util.Date(-2208977612000L));

        conBtnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/webmaster_2531_text_align_center.png"))); // NOI18N
        conBtnListar.setText("Listar");
        conBtnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conBtnListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(conDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conBtnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(conDataFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conDataInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conBtnListar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tipo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.darkGray), "( Enviar documento anexado por EMail )", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 153))); // NOI18N

        jLabel4.setText("PARA:");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel5.setText("ASSUNTO:");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel6.setText("MENSAGEM:");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jbtSend.setText("Enviar");
        jbtSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSendActionPerformed(evt);
            }
        });

        jPara.setToolTipText("");

        jBuscar.setText("Buscar");
        jBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuscarActionPerformed(evt);
            }
        });

        jMensagem.setContentType("\"text/html\""); // NOI18N
        jScrollPane3.setViewportView(jMensagem);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPara, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jbtSend, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSubject)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jPara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtSend))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "[ Arquivos ]", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel7.setText("Filtro:");

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/Clean_16x16.jpeg"))); // NOI18N
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearMouseClicked(evt);
            }
        });

        filtro.setBorder(null);
        filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroActionPerformed(evt);
            }
        });
        filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filtro)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Actions-document-print-preview-icon.png"))); // NOI18N
        btPreview.setText("Preview");
        btPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPreviewActionPerformed(evt);
            }
        });

        tFiles.setAutoCreateRowSorter(true);
        tFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tFiles);

        btRetornar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/closer.gif"))); // NOI18N
        btRetornar.setText("Retornar");
        btRetornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetornarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRetornar))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btPreview, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRetornar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSendActionPerformed
//        if (jSubject.getText().trim().equalsIgnoreCase("") || jMensagem.getText().trim().equalsIgnoreCase("")) {
//            JOptionPane.showMessageDialog(null, "Campos assunto e mensagem não podem estar em branco!!!", "Atenção", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        int selRow = tFiles.getSelectedRow();
//        int modelRow = tFiles.convertRowIndexToModel(selRow);
//        String rdoc = (String) tFiles.getModel().getValueAt(modelRow, 0);
//
//        //Outlook email = new Outlook(true);
//        try {
//            String To = jPara.getText().trim().toLowerCase();
//            String Subject = jSubject.getText().trim();
//            String Body = jMensagem.getDocument().getText(0, jMensagem.getDocument().getLength());
//            //String[] Attachments = new String[] {System.getProperty("user.dir") + "/" + pasta + rdoc};
//
//            Gmail service = GmailAPI.getGmailService();
//            MimeMessage Mimemessage = createEmailWithAttachment(To,"me",Subject,Body,new File(System.getProperty("user.dir") + "/" + pasta + rdoc));
//            System.out.println("Arquivo: " + System.getProperty("user.dir") + "/" + pasta + rdoc);
//
//            Message message = createMessageWithEmail(Mimemessage);
//
//            message = service.users().messages().send("me", message).execute();
//
//            System.out.println("Message id: " + message.getId());
//            System.out.println(message.toPrettyString());
//            if (message.getId() != null) {
//                JOptionPane.showMessageDialog(null, "Enviado com sucesso!!!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            } else {
//                JOptionPane.showMessageDialog(null, "Erro ao enviar!!!\n\nTente novamente...", "Atenção", JOptionPane.ERROR_MESSAGE);
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_jbtSendActionPerformed

    private void jBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuscarActionPerformed
        String[][] busca = {}; String jcampo = ""; String jtabela = ""; String jwhere = "";

        if (jPara.getText().toUpperCase().subSequence(0, 1).equals("P")) {
            jcampo = "email";
            jtabela = "proprietarios";
            jwhere = "rgprp = '" + jPara.getText().toUpperCase().substring(1) + "'";
        } else if (jPara.getText().toUpperCase().subSequence(0, 1).equals("L")) {
            jcampo = "email";
            jtabela = "locatarios";
            jwhere = "contrato = '" + jPara.getText().toUpperCase().substring(1) + "'";
        } if (jPara.getText().toUpperCase().subSequence(0, 1).equals("F")) {
            jcampo = "email";
            jtabela = "fiadores";
            jwhere = "contrato = '" + jPara.getText().toUpperCase().substring(1) + "'";
        }
        try {
            busca = VariaveisGlobais.conexao.LerCamposTabela(new String[] {jcampo}, jtabela, jwhere);
        } catch (Exception e) {}

        try {
            if (!busca[0][3].trim().equalsIgnoreCase("")) {
                jPara.setText(busca[0][3]);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_jBuscarActionPerformed

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked
        filtro.setText(null);
        filtro.requestFocus();
    }//GEN-LAST:event_btnClearMouseClicked

    private void filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filtroActionPerformed

    private void filtroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroKeyReleased
        if ("".equals(filtro.getText().trim())) {
            sorter.setRowFilter(null);
        } else {
            try {
                sorter.setRowFilter(RowFilter.regexFilter(filtro.getText().trim()));
            } catch (PatternSyntaxException pse) {
                System.err.println("Bad regex pattern");
            }
        }
    }//GEN-LAST:event_filtroKeyReleased

    private void btPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviewActionPerformed
        int selRow = tFiles.getSelectedRow();
        int modelRow = tFiles.convertRowIndexToModel(selRow);
        String docName = "";
        if (tipo.getSelectedIndex() == 0) {
            // Recibos
            docName = ImprimeReciboPDF(modelRow, true);
        } else if (tipo.getSelectedIndex() == 1) {
            // Boletas
            docName = ImprimeReciboPDF(modelRow, false);
        } else if (tipo.getSelectedIndex() == 2) {
            // Extratos
        } else if (tipo.getSelectedIndex() == 3) {
            // Avisos
        }
        new toPreview(docName);
    }//GEN-LAST:event_btPreviewActionPerformed

    private void BuildTable(JTable grade, Object[][] data) {
        // Limpa grade
        try { tabela.Clear(grade); } catch (Exception e) {}
        
        Integer[] tam = {90,100,240,60,50};
        String[] col = {"reg","tipo","nome","data","aut"};
        Boolean[] edt = {false,false,false,false,false};
        String[] aln = {"C","C","L","C","C"};
        
        for (Object[] dado : data) {
            tabela.insert(data, dado);
        }
        
        if (data.length > 0) tabela.Show(grade, data, tam, aln, col, edt);
        
        sorter = new TableRowSorter<TableModel>(grade.getModel());
        grade.setRowSorter(sorter);        
    }
    
    private void conBtnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conBtnListarActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        tipo.setEnabled(false);
        conDataInicial.setEnabled(false);
        conDataFinal.setEnabled(false);
        conBtnListar.setEnabled(false);
        btPreview.setEnabled(true);
        btRetornar.setEnabled(true);        
        jbtSend.setEnabled(true);
        
        
        if (tipo.getSelectedIndex() == 0) {
            // Recibos
            ListarRecibos(conDataInicial.getDate(), conDataFinal.getDate());
        } else if (tipo.getSelectedIndex() == 1) {
            // Boletas
            ListarBoletos(conDataInicial.getDate(), conDataFinal.getDate());
        } else if (tipo.getSelectedIndex() == 2) {
            // Extratos
            ListarExtratos(conDataInicial.getDate(), conDataFinal.getDate());
        } else if (tipo.getSelectedIndex() == 3) {
            // Avisos
            ListarAvisos(conDataInicial.getDate(), conDataFinal.getDate());
        } else {
            // Seleção invalida
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_conBtnListarActionPerformed

    private void btRetornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetornarActionPerformed
        tipo.setEnabled(true);
        conDataInicial.setEnabled(true);
        conDataFinal.setEnabled(true);
        conBtnListar.setEnabled(true);
        btPreview.setEnabled(false);
        btRetornar.setEnabled(false);        
        jbtSend.setEnabled(false);
    }//GEN-LAST:event_btRetornarActionPerformed

    private void ListarRecibos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT r.contrato, (SELECT l.nomerazao FROM locatarios l " + 
                "WHERE l.contrato = r.contrato LIMIT 1) nome, r.dtvencimento, r.autenticacao " + 
                "FROM recibo r WHERE r.tag = 'X' AND r.autenticacao != 0 AND " + 
                "ISNULL(r.nnumero) AND r.dtvencimento BETWEEN :inicio AND :final ORDER BY r.dtvencimento, 2;";
        ResultSet rs = db.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = "RECIBOS"; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("contrato"); } catch (SQLException e) { _registro = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("dtvencimento"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("autenticacao"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        db.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }

    private void ListarBoletos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT r.contrato, (SELECT l.nomerazao FROM locatarios l " + 
                "WHERE l.contrato = r.contrato LIMIT 1) nome, r.dtvencimento, r.autenticacao " + 
                "FROM recibo r WHERE r.tag = 'X' AND r.autenticacao != 0 AND " + 
                "NOT ISNULL(r.nnumero) AND r.dtvencimento BETWEEN :inicio AND :final " + 
                "ORDER BY r.dtvencimento, 2;";
        ResultSet rs = db.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = "BOLETOS"; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("contrato"); } catch (SQLException e) { _registro = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("dtvencimento"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("autenticacao"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        db.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }

    private void ListarExtratos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT e.contrato, (SELECT p.nome FROM proprietarios p " + 
                "WHERE p.rgprp = e.contrato) nome, e.dtrecebimento, e.rc_aut FROM auxiliar e " + 
                "WHERE e.conta = 'EXT' AND e.rc_aut != 0 AND e.dtrecebimento BETWEEN :inicio AND :final " + 
                "GROUP BY e.rc_aut ORDER BY e.dtrecebimento, 2;";
        ResultSet rs = db.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = "EXTRATOS"; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("contrato"); } catch (SQLException e) { _registro = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("dtrecebimento"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("rc_aut"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        db.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }

    private void ListarAvisos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT a.registro, CASE WHEN a.rid = 0 THEN 'DISPONIVEL' " +
        "WHEN a.rid = 2 THEN 'ADM' WHEN a.rid = 3 THEN 'SOCIOS' WHEN a.rid = 4 THEN 'LOCATARIOS' END tipo, " +
        "CASE WHEN a.rid = 0 THEN (SELECT p.nome FROM proprietarios p WHERE p.rgprp = a.registro LIMIT 1) " +
        "WHEN a.rid = 2 THEN (SELECT m.descr FROM adm m WHERE m.codigo = a.registro LIMIT 1) " +
        "WHEN a.rid = 3 THEN (SELECT s.nome FROM socios s WHERE s.autoid = a.registro LIMIT 1) " +
        "WHEN a.rid = 4 THEN (SELECT l.nomerazao FROM locatarios l WHERE l.contrato = a.registro LIMIT 1) " +
        "END nome, RetAvDataRid2(a.campo) data, a.autenticacao FROM avisos a WHERE a.rid IN (0,2,3,4) AND " +
        "a.autenticacao != 0 AND RetAvDataRid2(a.campo) BETWEEN :inicio AND :final " +
        "ORDER BY RetAvDataRid2(a.campo), 2, 3;";
        ResultSet rs = db.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = null; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("registro"); } catch (SQLException e) { _registro = null; };
                try { _tipo = rs.getString("tipo"); } catch (SQLException e) { _tipo = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("data"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("autenticacao"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        db.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btPreview;
    private javax.swing.JButton btRetornar;
    private javax.swing.JLabel btnClear;
    private javax.swing.JButton conBtnListar;
    private com.toedter.calendar.JDateChooser conDataFinal;
    private com.toedter.calendar.JDateChooser conDataInicial;
    private javax.swing.JTextField filtro;
    private javax.swing.JButton jBuscar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JEditorPane jMensagem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jPara;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jSubject;
    private javax.swing.JButton jbtSend;
    private javax.swing.JTable tFiles;
    private javax.swing.JComboBox tipo;
    // End of variables declaration//GEN-END:variables

   public String ImprimeReciboPDF(int selRow, boolean isRecibo) {       
        String contrato = tFiles.getValueAt(selRow, 0).toString();
        String vencimento = tFiles.getValueAt(selRow, 3).toString();
        int nAut = Integer.parseInt(tFiles.getValueAt(selRow, 4).toString());
           
        // Pegar rgprp, rgimv, contrato, ...
        String selectCaixa = "SELECT cb.CX_DATA, cb.CX_HORA, cb.CX_LOGADO, " +
        "cb.CX_CONTRATO, cb.CX_RGPRP, cb.CX_RGIMV, cb.CX_OPER, cb.CX_VRDN, " +
        "cb.CX_VRCH, cb.CX_CHREL, cb.CX_TIPOPG, cb.CX_DOC, cb.CX_NDOCS " + 
        "FROM caixabck cb WHERE cb.CX_DOC = 'RC' AND cb.CX_AUT = :aut " + 
        "UNION SELECT cx.CX_DATA, cx.CX_HORA, cx.CX_LOGADO, cx.CX_CONTRATO, " +
        "cx.CX_RGPRP, cx.CX_RGIMV, cx.CX_OPER, cx.CX_VRDN, cx.CX_VRCH, " +
        "cx.CX_CHREL, cx.CX_TIPOPG, cx.CX_DOC, cx.CX_NDOCS " + 
        "FROM caixa cx WHERE cx.CX_DOC = 'RC' AND cx.CX_AUT = :reg ;";
        ResultSet rs = db.OpenTable(selectCaixa, new Object[][] {
            {"int", "aut", nAut}, 
            {"int", "reg", nAut}
        });
        
        int pos = 1; BigDecimal _total = new BigDecimal("0");
        Map<Integer, Object> cxDados = new HashMap<Integer, Object>();
        try {
            while (rs.next()) {
                Date CX_DATA = null; try { CX_DATA = rs.getDate("CX_DATA"); } catch (SQLException e) {}
                String CX_HORA = null; try { CX_HORA = rs.getString("CX_HORA"); } catch (SQLException e) {}
                String CX_LOGADO = null; try { CX_LOGADO = rs.getString("CX_LOGADO"); } catch (SQLException e) {}
                String CX_CONTRATO = null; try { CX_CONTRATO = rs.getString("CX_CONTRATO"); } catch (SQLException e) {}
                String CX_RGPRP = null; try { CX_RGPRP = rs.getString("CX_RGPRP"); } catch (SQLException e) {}
                String CX_RGIMV = null; try { CX_RGIMV = rs.getString("CX_RGIMV"); } catch (SQLException e) {}
                String CX_OPER = null; try { CX_OPER = rs.getString("CX_OPER"); } catch (SQLException e) {}
                BigDecimal CX_VRDN = null; try { CX_VRDN = rs.getBigDecimal("CX_VRDN"); } catch (SQLException e) {}
                BigDecimal CX_VRCH = null; try { CX_VRCH = rs.getBigDecimal("CX_VRCH"); } catch (SQLException e) {}
                String CX_CHREL = null; try { CX_CHREL = rs.getString("CX_CHREL"); } catch (SQLException e) {}
                String CX_TIPOPG = null; try { CX_TIPOPG = rs.getString("CX_TIPOPG"); } catch (SQLException e) {}
                String CX_DOC = null; try { CX_DOC = rs.getString("CX_DOC"); } catch (SQLException e) {}
                int CX_NDOCS = -1; try { CX_NDOCS = rs.getInt("CX_NDOCS"); } catch (SQLException e) {}
                
                Map<String, Object> caixa = new HashMap<String, Object>();
                caixa.put("data", CX_DATA);
                caixa.put("hora", CX_HORA);
                caixa.put("logado", CX_LOGADO);
                caixa.put("contrato", CX_CONTRATO);
                caixa.put("rgprp", CX_RGPRP);
                caixa.put("rgimv", CX_RGIMV);
                caixa.put("oper", CX_OPER);
                caixa.put("vrdn", CX_VRDN);
                caixa.put("vrch", CX_VRCH);
                caixa.put("chrel", CX_CHREL);
                caixa.put("tipopg", CX_TIPOPG);
                caixa.put("doc", CX_DOC);
                caixa.put("ndocs", CX_NDOCS);
                
                cxDados.put(pos++, caixa);
                _total = _total.add(CX_VRDN).add(CX_VRCH);
            }
        } catch (SQLException sqlEx) {}
        db.CloseTable(rs);
        if (cxDados.size() == 0) {
            JOptionPane.showMessageDialog(this, "Este recibo não existe dento do caixa para ser re-impresso!");
            return null;
        }
        Map<String, Object> caixa = ((Map<String, Object>)cxDados.get(1));
        String ValorRec = LerValor.floatToCurrency(_total.floatValue(),2);
        String jVrRecibo = ValorRec;
        
        // Pega o nome do locatário
        Object[][] aNomeLoca = null;
        try { aNomeLoca = db.ReadFieldsTable(new String[] {"nomerazao", "rgprp", "rgimv"}, "locatarios", "contrato = :contrato", new Object[][] {{"string", "contrato", contrato}}); } catch (SQLException e) {}
        String jNomeLoca = aNomeLoca[0][3].toString();
        String rgprp = aNomeLoca[1][3].toString();
        String rgimv = aNomeLoca[2][3].toString();
        
        // Pega o endereço do Imovel
        Object[][] aImovel = null;
        try { aImovel = db.ReadFieldsTable(new String[] {"end", "num", "compl", "bairro", "cidade", "estado", "cep"}, "imoveis", "rgprp = :rgprp AND rgimv = :rgimv", new Object[][] {{"string", "rgprp", rgprp}, {"string", "rgimv", rgimv}}); } catch (SQLException e) {}
        String jEndereco = StringManager.ConvStr(aImovel[0][3].toString().trim() + ", " + aImovel[1][3].toString().trim() + (aImovel[2][3].toString().trim().equalsIgnoreCase("") ? "" : " - " + aImovel[2][3].toString().trim()));
        String jBairro = StringManager.ConvStr(aImovel[3][3].toString());
        String jCidade = StringManager.ConvStr(aImovel[4][3].toString());
        String jEstado = aImovel[5][3].toString().trim().toUpperCase();
        String jCep = aImovel[6][3].toString();
        
        // Pega nome do Proprietário
        Object[][] aProprietario = null;
        try {aProprietario = db.ReadFieldsTable(new String[] {"nome"}, "proprietarios", "rgprp = :rgprp", new Object[][] {{"string", "rgprp", rgprp}}); } catch (SQLException e) {}
        String jNomeProp = StringManager.ConvStr(aProprietario[0][3].toString());
        
        // Pega campos do recibo
        Object[][] aCampos = null;
        try {
            aCampos = db.ReadFieldsTable(new String[] {"campo", "nnumero"}, "recibo", "rgprp = :rgprp AND rgimv = :rgimv AND contrato = :contrato AND dtvencimento = :vencimento", new Object[][] {
                {"string", "rgprp", rgprp},
                {"string", "rgimv", rgimv},
                {"string", "contrato", contrato},
                {"string", "vencimento", vencimento}
            });
        } catch (SQLException e) {}
        
        // Impressão individual do recibo
        int via = 1; int nRecibos = 1;
        
        float[] columnWidths = {};
        Collections gVar = VariaveisGlobais.dCliente;
        jPDF pdf = new jPDF();
        String sFileName = new tempFile("pdf").getsPathNameExt();
        pdf.setPathName(new tempFile().getTempPath());
        String docName = new tempFile().getTempFileName(sFileName);
        pdf.setDocName(docName);
        
        BaseFont bf = null;
        try {
            bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        com.itextpdf.text.Font font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);

        pdf.open();
        
        // Logo
        com.itextpdf.text.Image img;
        try {
            img = com.itextpdf.text.Image.getInstance("resources/logos/boleta/" + VariaveisGlobais.dCliente.get("marca").trim() + ".gif");
            img.setAlignment(Element.ALIGN_LEFT);        
            pdf.doc_add(img);
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        Paragraph p;
        
        p = pdf.print(gVar.get("empresa"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        if (!gVar.get("cnpj").trim().equals("") || gVar.get("cnpj") != null) {
            p = pdf.print(gVar.get("tipodoc"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT,pdf.BLACK);
            pdf.doc_add(p);
        }
        p = pdf.print(gVar.get("endereco") + ", " + gVar.get("numero") + " " + gVar.get("complemento"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(gVar.get("bairro") + " - " + gVar.get("cidade") + " - " + gVar.get("estado") + " - " + gVar.get("cep"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("Tel/Fax:" + gVar.get("telefone"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print((isRecibo ? gVar.get("recibo") : "RECIBO DO BOLETO NNUMERO: " + aCampos[1][3].toString().trim()), pdf.HELVETICA, 12, pdf.BOLD, pdf.CENTER, pdf.BLUE);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);
        
        columnWidths = new float[] {37, 63 };
        PdfPTable table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);
        font.setColor(BaseColor.BLACK);
        
        String _data = caixa.get("data").toString().substring(0,10);
        String _hora = caixa.get("hora").toString();        
        Date dataRecibo = Dates.StringtoDate(_data + " " + _hora, "yyyy-MM-dd HH:mm:ss");
        PdfPCell cell1 = new PdfPCell(new Phrase("CAIXA: " + caixa.get("logado").toString().trim().toUpperCase(),font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        PdfPCell cell2 = new PdfPCell(new Phrase("Data/Hora: " + Dates.DateFormata("dd/MM/yyyy HH:mm", dataRecibo),font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        table.completeRow();
        pdf.doc_add(table);

        p = pdf.print("", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        LineSeparator l = new LineSeparator();
        l.setPercentage(100f);
        p.add(new Chunk(l));
        pdf.doc_add(p);

        // Dados do locatario
        columnWidths = new float[] {35, 65 };
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);

        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);        
        cell1 = new PdfPCell(new Phrase("Locatário: " + contrato,font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase(StringManager.ConvStr(jNomeLoca.toUpperCase().toString()),font));
        cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        
        font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);
        cell1 = new PdfPCell(new Phrase("Imóvel: " + caixa.get("rgimv"),font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("Vencimento: " + Dates.StringtoString(vencimento,"yyyy-MM-dd","dd-MM-yyyy"),font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        table.completeRow();
        pdf.doc_add(table);
        
        p = pdf.print(StringManager.ConvStr(jEndereco), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(StringManager.ConvStr(jBairro + " - " + jCidade), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(StringManager.ConvStr(jEstado + " - Cep: " + jCep), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);

        // Cabeçario do recibo
        columnWidths = new float[] {50, 20, 30};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font.setColor(BaseColor.WHITE);
        cell1 = new PdfPCell(new Phrase("DISCRIMINAÇÃO",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.BLACK);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("C/P",font));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.BLACK);
        table.addCell(cell2);
        PdfPCell cell3 = new PdfPCell(new Phrase("VALOR", font));
        cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell3.setBorder(Rectangle.NO_BORDER);
        cell3.setBackgroundColor(BaseColor.BLACK);
        table.addCell(cell3);
        table.completeRow();
        pdf.doc_add(table);

        columnWidths = new float[] {50, 20, 30};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        Object[][] linhas = ListaCamposRecibo_pdf(aCampos[0][3].toString());
        for (int i=0; i<linhas.length;i++) {
            // Dados do recibo
            font.setColor(BaseColor.BLACK);
            cell1 = new PdfPCell(new Phrase((String) linhas[i][0],font));
            cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell1.setBorder(Rectangle.NO_BORDER);
            cell1.setBackgroundColor(BaseColor.WHITE);
            table.addCell(cell1);
            cell2 = new PdfPCell(new Phrase((String) linhas[i][1],font));
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell2.setBorder(Rectangle.NO_BORDER);
            cell2.setBackgroundColor(BaseColor.WHITE);
            table.addCell(cell2);
            cell3 = new PdfPCell(new Phrase((String) linhas[i][2], font));
            cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell3.setBorder(Rectangle.NO_BORDER);
            cell3.setBackgroundColor(BaseColor.WHITE);
            table.addCell(cell3);
        }
        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("",font));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);
        cell3 = new PdfPCell(new Phrase("==========", font));
        cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell3.setBorder(Rectangle.NO_BORDER);
        cell3.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell3);

        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("Total do Recibo",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("",font));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);
        cell3 = new PdfPCell(new Phrase(jVrRecibo, font));
        cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell3.setBorder(Rectangle.NO_BORDER);
        cell3.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell3);
        table.completeRow();
        pdf.doc_add(table);

        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);

        columnWidths = new float[] {35, 65};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);
        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("Propriet(s): " + rgprp,font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.TOP);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase(StringManager.ConvStr(jNomeProp),font));
        cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell2.setBorder(Rectangle.TOP);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);

        if (VariaveisGlobais.impPropDiv) {
            Object[][] div = {};
            try {div = db.ReadFieldsTable(new String[] {"benefs"}, "divisao", "rgprp = '" + caixa.get("rgprp") + "' AND rgimv = '" + caixa.get("rgimv") + "'");} catch (SQLException ex) {}
            if (div != null) {
                if (div.length > 0) {
                    for (int q=0;q<div.length;q++) {
                        String[] cpos = div[q][3].toString().split(";");
                        for (int z=0; z<cpos.length;z++) {
                            String[] scpos = cpos[z].split(":");
                            if (scpos.length > 0) {
                                Object[][] nmProDiv = {};
                                try {nmProDiv = db.ReadFieldsTable(new String[] {"nome"}, "proprietarios", "rgprp = '" + scpos[0] + "'");} catch (SQLException ex) {}
                                try {
                                    font.setColor(BaseColor.BLACK);
                                    cell1 = new PdfPCell(new Phrase("Propriet(s): " + scpos[0],font));
                                    cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
                                    cell1.setBorder(Rectangle.NO_BORDER);
                                    cell1.setBackgroundColor(BaseColor.WHITE);
                                    table.addCell(cell1);
                                    cell2 = new PdfPCell(new Phrase(StringManager.ConvStr(nmProDiv[0][3].toString()),font));
                                    cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
                                    cell2.setBorder(Rectangle.NO_BORDER);
                                    cell2.setBackgroundColor(BaseColor.WHITE);
                                    table.addCell(cell2);
                                } catch (Exception e) {}
                            }
                        }
                    }
                }
            }
        }
        table.completeRow();
        pdf.doc_add(table);
         
        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);
        // Mensagem do Recibo
        String msgem = "";
        try {
            try { msgem = db.ReadFieldsTable(new String[] {"msgboleta"}, "locatarios", "contrato = '" + contrato + "'")[0][3].toString();} catch (SQLException ex) {msgem = "";}
            if (!msgem.trim().equalsIgnoreCase("")) {
                p = pdf.print("\n", pdf.HELVETICA, 7, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
                pdf.doc_add(p);
                p = pdf.print("__________ MENSAGEM __________", pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
                pdf.doc_add(p);
                p = pdf.print(msgem, pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
                pdf.doc_add(p);
                p = pdf.print("\n", pdf.HELVETICA, 7, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
                pdf.doc_add(p);
            }
        } catch (Exception e) {}

        if (nAut > 0) {
            p = pdf.print("__________ VALOR(ES) LANCADOS __________", pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);

            for (int i=1;i<=cxDados.size();i++) {
                Map<String, Object> cxa = (Map<String, Object>)cxDados.get(i);
                String bLinha = cxa.get("chrel").toString();
//                if (!"".equals(Valores[i][1].trim())) {
//                    bLinha = "BCO:" + new Pad(Valores[i][1],3).RPad() + " AG:" + new Pad(Valores[i][2],4).RPad() + " CH:" + new Pad(Valores[i][3],8).RPad() + " DT: " + new Pad(Valores[i][0],10).CPad() + " VR:" + new Pad(Valores[i][4],10).LPad();
//                } else {
//                    bLinha = (Valores[i][5].trim().toUpperCase().equalsIgnoreCase("CT") ? "BC" : Valores[i][5].trim().toUpperCase()) +  ":" + new Pad(Valores[i][4],10).LPad();
//                }

                p = pdf.print(bLinha, pdf.HELVETICA, 6, pdf.NORMAL, pdf.RIGHT, pdf.BLACK);
                pdf.doc_add(p);
            }

            p = pdf.print("\n", pdf.HELVETICA, 6, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
            pdf.doc_add(p);

            p = pdf.print("Este recibo não quita qualquer débito anterior.", pdf.HELVETICA, 6, pdf.BOLDITALIC, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);

            l = new LineSeparator();
            l.setPercentage(100f);
            p = pdf.print("", pdf.HELVETICA, 7, pdf.BOLDITALIC, pdf.LEFT, pdf.BLACK);
            p.add(new Chunk(l));
            pdf.doc_add(p);

            // Imprimir Autenticação
            p = pdf.print(VariaveisGlobais.dCliente.get("marca").trim() + "RC" + FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7) + "-" +
                          FuncoesGlobais.StrZero(String.valueOf((int)via), 2) + 
                          Dates.DateFormata("ddMMyyyyHHmmss", dataRecibo) + FuncoesGlobais.GravaValores(ValorRec, 2) + caixa.get("logado").toString().toLowerCase().trim(), pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);
            
            PdfContentByte cb = pdf.writer().getDirectContent();
            BarcodeInter25 code25 = new BarcodeInter25();
            String barra = FuncoesGlobais.StrZero(String.valueOf((int)nAut),16);
            code25.setCode(barra);
            code25.setChecksumText(true);
            code25.setFont(null);
            com.itextpdf.text.Image cdbar = code25.createImageWithBarcode(cb, null, null);
            cdbar.setAlignment(Element.ALIGN_CENTER);
            pdf.doc_add(cdbar);            
        }

        // Pula linhas (6) / corta papel
        for (int k=1;k<=6;k++) { 
            p = pdf.print("\n", pdf.HELVETICA, 6, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
            pdf.doc_add(p);
        }
        
        pdf.close();
        
        String rPathName = pdf.getPathName();       
        pdf.setPathName("");
        pdf.setDocName("");
        return rPathName + docName;       
   }

    private Object[][] ListaCamposRecibo_pdf(String campos) {
        Object[][] linhas = {};
        VariaveisGlobais.ccampos = campos;
        String cCampos[] = VariaveisGlobais.ccampos.split(";");
        
        DepuraCampos a = new DepuraCampos(VariaveisGlobais.ccampos);
        a.SplitCampos();
        // Ordena Matriz
        Arrays.sort (a.aCampos, new Comparator()
        {
        private int pos1 = 3;
        private int pos2 = 4;
        public int compare(Object o1, Object o2) {
            String p1 = ((String)o1).substring(pos1, pos2);
            String p2 = ((String)o2).substring(pos1, pos2);
            return p1.compareTo(p2);
        }
        });

        // Monta campos
        int i = 0;
        for (i=0; i<= a.length() - 1; i++) {
            String[] Campo = null; try { Campo = a.Depurar(i); } catch (SQLException e) {}
            if (Campo.length > 0) {
                Object[] linha = MontaCampos(Campo);
                linhas =  FuncoesGlobais.ObjectsAdd(linhas, (Object[])linha);
            }
        }
        
        return linhas;
    }
   
    private Object[] MontaCampos(String[] aCampos) {
        return new Object[] {
            aCampos[0], 
            VariaveisGlobais.bShowCotaParcela ? 
                ("".equals(aCampos[3]) ? 
                    "00/00" + (!"C".equals(aCampos[5]) ? "00" 
                : "") 
            : "00/00".equals(aCampos[3]) ? "" : aCampos[3]) : "", 
            aCampos[1]
        };
    }
    
}
